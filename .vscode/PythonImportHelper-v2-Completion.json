[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "AsyncAdaptedQueuePool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "webapp.models.sirius.post",
        "description": "webapp.models.sirius.post",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.post",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "webapp.models.sirius.post",
        "description": "webapp.models.sirius.post",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.post",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "webapp.models.sirius.comment",
        "description": "webapp.models.sirius.comment",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "webapp.models.sirius.comment",
        "description": "webapp.models.sirius.comment",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.comment",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "TestKafkaProducer",
        "importPath": "tests.mocking.kafka",
        "description": "tests.mocking.kafka",
        "isExtraImport": true,
        "detail": "tests.mocking.kafka",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "scripts.load_data",
        "description": "scripts.load_data",
        "isExtraImport": true,
        "detail": "scripts.load_data",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "webapp.main",
        "description": "webapp.main",
        "isExtraImport": true,
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "create_producer",
        "importPath": "webapp.on_startup.kafka",
        "description": "webapp.on_startup.kafka",
        "isExtraImport": true,
        "detail": "webapp.on_startup.kafka",
        "documentation": {}
    },
    {
        "label": "create_producer",
        "importPath": "webapp.on_startup.kafka",
        "description": "webapp.on_startup.kafka",
        "isExtraImport": true,
        "detail": "webapp.on_startup.kafka",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionMarker",
        "importPath": "_pytest.fixtures",
        "description": "_pytest.fixtures",
        "isExtraImport": true,
        "detail": "_pytest.fixtures",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedisError",
        "importPath": "redis.exceptions",
        "description": "redis.exceptions",
        "isExtraImport": true,
        "detail": "redis.exceptions",
        "documentation": {}
    },
    {
        "label": "RedisError",
        "importPath": "redis.exceptions",
        "description": "redis.exceptions",
        "isExtraImport": true,
        "detail": "redis.exceptions",
        "documentation": {}
    },
    {
        "label": "kafka_producer_decorator",
        "importPath": "webapp",
        "description": "webapp",
        "isExtraImport": true,
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "kafka_producer_decorator",
        "importPath": "webapp",
        "description": "webapp",
        "isExtraImport": true,
        "detail": "webapp",
        "documentation": {}
    },
    {
        "label": "create_comment",
        "importPath": "webapp.crud.comment",
        "description": "webapp.crud.comment",
        "isExtraImport": true,
        "detail": "webapp.crud.comment",
        "documentation": {}
    },
    {
        "label": "delete_comment",
        "importPath": "webapp.crud.comment",
        "description": "webapp.crud.comment",
        "isExtraImport": true,
        "detail": "webapp.crud.comment",
        "documentation": {}
    },
    {
        "label": "get_comment_by_id",
        "importPath": "webapp.crud.comment",
        "description": "webapp.crud.comment",
        "isExtraImport": true,
        "detail": "webapp.crud.comment",
        "documentation": {}
    },
    {
        "label": "get_comments_by_post",
        "importPath": "webapp.crud.comment",
        "description": "webapp.crud.comment",
        "isExtraImport": true,
        "detail": "webapp.crud.comment",
        "documentation": {}
    },
    {
        "label": "update_comment",
        "importPath": "webapp.crud.comment",
        "description": "webapp.crud.comment",
        "isExtraImport": true,
        "detail": "webapp.crud.comment",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "webapp.on_startup",
        "description": "webapp.on_startup",
        "isExtraImport": true,
        "detail": "webapp.on_startup",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "webapp.on_startup",
        "description": "webapp.on_startup",
        "isExtraImport": true,
        "detail": "webapp.on_startup",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "importPath": "webapp.schema.content.comment",
        "description": "webapp.schema.content.comment",
        "isExtraImport": true,
        "detail": "webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "CommentRead",
        "importPath": "webapp.schema.content.comment",
        "description": "webapp.schema.content.comment",
        "isExtraImport": true,
        "detail": "webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "importPath": "webapp.schema.content.comment",
        "description": "webapp.schema.content.comment",
        "isExtraImport": true,
        "detail": "webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "webapp.utils.auth.user",
        "description": "webapp.utils.auth.user",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.user",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "webapp.utils.auth.user",
        "description": "webapp.utils.auth.user",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.user",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.login.router",
        "description": "webapp.api.login.router",
        "isExtraImport": true,
        "detail": "webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "get_user_by_email",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "get_user_by_username",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "importPath": "webapp.crud.user",
        "description": "webapp.crud.user",
        "isExtraImport": true,
        "detail": "webapp.crud.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.schema.login.user",
        "description": "webapp.schema.login.user",
        "isExtraImport": true,
        "detail": "webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserRegistration",
        "importPath": "webapp.schema.registration.reg",
        "description": "webapp.schema.registration.reg",
        "isExtraImport": true,
        "detail": "webapp.schema.registration.reg",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "webapp.utils.auth.password",
        "description": "webapp.utils.auth.password",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.password",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "webapp.utils.auth.password",
        "description": "webapp.utils.auth.password",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.password",
        "documentation": {}
    },
    {
        "label": "create_post",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "get_all_posts",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "get_post_by_id",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "get_posts_by_user",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "importPath": "webapp.crud.post",
        "description": "webapp.crud.post",
        "isExtraImport": true,
        "detail": "webapp.crud.post",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "importPath": "webapp.schema.content.post",
        "description": "webapp.schema.content.post",
        "isExtraImport": true,
        "detail": "webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "PostRead",
        "importPath": "webapp.schema.content.post",
        "description": "webapp.schema.content.post",
        "isExtraImport": true,
        "detail": "webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "PostUpdate",
        "importPath": "webapp.schema.content.post",
        "description": "webapp.schema.content.post",
        "isExtraImport": true,
        "detail": "webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "redis.asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "get_redis_pool",
        "importPath": "webapp.on_startup.redis",
        "description": "webapp.on_startup.redis",
        "isExtraImport": true,
        "detail": "webapp.on_startup.redis",
        "documentation": {}
    },
    {
        "label": "get_redis_pool",
        "importPath": "webapp.on_startup.redis",
        "description": "webapp.on_startup.redis",
        "isExtraImport": true,
        "detail": "webapp.on_startup.redis",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "metrics",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "prometheus_client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE_LATEST",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "REGISTRY",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CollectorRegistry",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "generate_latest",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "comment_router",
        "importPath": "webapp.api.comment.router",
        "description": "webapp.api.comment.router",
        "isExtraImport": true,
        "detail": "webapp.api.comment.router",
        "documentation": {}
    },
    {
        "label": "post_router",
        "importPath": "webapp.api.post.router",
        "description": "webapp.api.post.router",
        "isExtraImport": true,
        "detail": "webapp.api.post.router",
        "documentation": {}
    },
    {
        "label": "close_redis_pool",
        "importPath": "webapp.on_shutdown",
        "description": "webapp.on_shutdown",
        "isExtraImport": true,
        "detail": "webapp.on_shutdown",
        "documentation": {}
    },
    {
        "label": "stop_producer",
        "importPath": "webapp.on_shutdown",
        "description": "webapp.on_shutdown",
        "isExtraImport": true,
        "detail": "webapp.on_shutdown",
        "documentation": {}
    },
    {
        "label": "MeasureLatencyMiddleware",
        "importPath": "webapp.utils.middleware",
        "description": "webapp.utils.middleware",
        "isExtraImport": true,
        "detail": "webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "MultiProcessCollector",
        "importPath": "prometheus_client.multiprocess",
        "description": "prometheus_client.multiprocess",
        "isExtraImport": true,
        "detail": "prometheus_client.multiprocess",
        "documentation": {}
    },
    {
        "label": "# type: ignore",
        "importPath": "prometheus_client.multiprocess",
        "description": "prometheus_client.multiprocess",
        "isExtraImport": true,
        "detail": "prometheus_client.multiprocess",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "description": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"user\",\n        sa.Column(\"id\", sa.Integer(), autoincrement=True, nullable=False),\n        sa.Column(\"username\", sa.String(), nullable=False),\n        sa.Column(\"email\", sa.String(), nullable=False),\n        sa.Column(\"hashed_password\", sa.String(), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\", name=op.f(\"pk_user\")),\n        sa.UniqueConstraint(\"email\", name=op.f(\"uq_user_email\")),",
        "detail": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "description": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_sirius_comment_id\"), table_name=\"comment\", schema=\"sirius\")\n    op.drop_table(\"comment\", schema=\"sirius\")\n    op.drop_index(op.f(\"ix_sirius_post_id\"), table_name=\"post\", schema=\"sirius\")\n    op.drop_table(\"post\", schema=\"sirius\")\n    op.drop_index(op.f(\"ix_sirius_user_id\"), table_name=\"user\", schema=\"sirius\")\n    op.drop_table(\"user\", schema=\"sirius\")\n    # ### end Alembic commands ###",
        "detail": "fastapi_blog.alembic.versions.3e0c1bf7289a_generate_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "fastapi_blog.alembic.env",
        "description": "fastapi_blog.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "fastapi_blog.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "fastapi_blog.alembic.env",
        "description": "fastapi_blog.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "fastapi_blog.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "fastapi_blog.alembic.env",
        "description": "fastapi_blog.alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "fastapi_blog.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "fastapi_blog.alembic.env",
        "description": "fastapi_blog.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "fastapi_blog.alembic.env",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "fastapi_blog.conf.config",
        "description": "fastapi_blog.conf.config",
        "peekOfCode": "class Settings(BaseSettings):  # наследуется от BaseSettings\n    BIND_IP: str\n    BIND_PORT: int\n    DB_URL: str  # URL для подключения к базе данных, используемой приложением\n    JWT_SECRET_SALT: str\n    # секретная строка, используемаядля генерации JWT-токенов, которые\n    # используются для аутентификации пользователей\n    KAFKA_BOOTSTRAP_SERVERS: List[str]\n    # список адресов Kafka-брокеров, которые будут\n    # использоваться для отправки и получения сообщений",
        "detail": "fastapi_blog.conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "fastapi_blog.conf.config",
        "description": "fastapi_blog.conf.config",
        "peekOfCode": "settings = Settings()  # type: ignore\n# экземпляр класса Settings, который содержит значения конфигурационных параметров\n# Конфигурация проекта определяет, какие параметры сборки и компилятора\n# используются при сборке проекта.\n# набор параметров и настроек, определяющих работу программного\n# обеспечения или системы.\n# если приложение запускается в режиме разработки (dev), то значения\n# параметров могут быть настроены для\n# локальной разработки, а если в продакшене (prod) - для более высокой\n# надежности и производительности.",
        "detail": "fastapi_blog.conf.config",
        "documentation": {}
    },
    {
        "label": "process_args",
        "kind": 2,
        "importPath": "fastapi_blog.scripts.load_data",
        "description": "fastapi_blog.scripts.load_data",
        "peekOfCode": "def process_args():\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('fixtures', nargs='+', help='<Required> Set flag')\n    args = parser.parse_args()\n    return args.fixtures\nif __name__ == '__main__':\n    fixtures = process_args()\n    asyncio.run(main(fixtures))\n# если этот скрипт запущен как основной файл (а не импортирован как модуль),",
        "detail": "fastapi_blog.scripts.load_data",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.auth.info.test_info",
        "description": "fastapi_blog.tests.api.auth.info.test_info",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            status.HTTP_200_OK,\n            [",
        "detail": "fastapi_blog.tests.api.auth.info.test_info",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.auth.info.test_info",
        "description": "fastapi_blog.tests.api.auth.info.test_info",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            status.HTTP_200_OK,\n            [\n                FIXTURES_PATH / 'sirius.user.json',",
        "detail": "fastapi_blog.tests.api.auth.info.test_info",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.auth.login.test_login",
        "description": "fastapi_blog.tests.api.auth.login.test_login",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'expected_status',\n        'expected_access_token',\n        'fixtures',\n    ),",
        "detail": "fastapi_blog.tests.api.auth.login.test_login",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.auth.login.test_login",
        "description": "fastapi_blog.tests.api.auth.login.test_login",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'expected_status',\n        'expected_access_token',\n        'fixtures',\n    ),\n    [",
        "detail": "fastapi_blog.tests.api.auth.login.test_login",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'post_id',\n        'content',\n        'expected_status',\n        'fixtures',",
        "detail": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'post_id',\n        'content',\n        'expected_status',\n        'fixtures',\n        'kafka_expected_messages',",
        "detail": "fastapi_blog.tests.api.content.comment.test_create_comment",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на удаление комментария\n@pytest.mark.parametrize(\n    ('username', 'password', 'comment_id', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            1,",
        "detail": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на удаление комментария\n@pytest.mark.parametrize(\n    ('username', 'password', 'comment_id', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            1,\n            status.HTTP_204_NO_CONTENT,",
        "detail": "fastapi_blog.tests.api.content.comment.test_delete_comment",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на получение комментария\n@pytest.mark.parametrize(\n    (\n        'post_id',\n        'expected_status',\n        'fixtures',\n    ),\n    [",
        "detail": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на получение комментария\n@pytest.mark.parametrize(\n    (\n        'post_id',\n        'expected_status',\n        'fixtures',\n    ),\n    [\n        (",
        "detail": "fastapi_blog.tests.api.content.comment.test_read_comment",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на обновление комментария\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'comment_id',\n        'updated_content',\n        'expected_status',",
        "detail": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "description": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на обновление комментария\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'comment_id',\n        'updated_content',\n        'expected_status',\n        'fixtures',",
        "detail": "fastapi_blog.tests.api.content.comment.test_update_comment",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_create_post",
        "description": "fastapi_blog.tests.api.content.post.test_create_post",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'content', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            status.HTTP_201_CREATED,\n            'This is my new post!',",
        "detail": "fastapi_blog.tests.api.content.post.test_create_post",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_create_post",
        "description": "fastapi_blog.tests.api.content.post.test_create_post",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n@pytest.mark.parametrize(\n    ('username', 'password', 'expected_status', 'content', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            status.HTTP_201_CREATED,\n            'This is my new post!',\n            [",
        "detail": "fastapi_blog.tests.api.content.post.test_create_post",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_delete_post",
        "description": "fastapi_blog.tests.api.content.post.test_delete_post",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на удаление комментария\n@pytest.mark.parametrize(\n    ('username', 'password', 'post_id', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            1,",
        "detail": "fastapi_blog.tests.api.content.post.test_delete_post",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_delete_post",
        "description": "fastapi_blog.tests.api.content.post.test_delete_post",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на удаление комментария\n@pytest.mark.parametrize(\n    ('username', 'password', 'post_id', 'expected_status', 'fixtures'),\n    [\n        (\n            'autotest',\n            'qwerty',\n            1,\n            status.HTTP_204_NO_CONTENT,",
        "detail": "fastapi_blog.tests.api.content.post.test_delete_post",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_read_post",
        "description": "fastapi_blog.tests.api.content.post.test_read_post",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на получение комментария\n@pytest.mark.parametrize(\n    (\n        'post_id',\n        'expected_status',\n        'fixtures',\n    ),\n    [",
        "detail": "fastapi_blog.tests.api.content.post.test_read_post",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_read_post",
        "description": "fastapi_blog.tests.api.content.post.test_read_post",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на получение комментария\n@pytest.mark.parametrize(\n    (\n        'post_id',\n        'expected_status',\n        'fixtures',\n    ),\n    [\n        (",
        "detail": "fastapi_blog.tests.api.content.post.test_read_post",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_update_post",
        "description": "fastapi_blog.tests.api.content.post.test_update_post",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на обновление комментария\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'post_id',\n        'updated_content',\n        'expected_status',",
        "detail": "fastapi_blog.tests.api.content.post.test_update_post",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "fastapi_blog.tests.api.content.post.test_update_post",
        "description": "fastapi_blog.tests.api.content.post.test_update_post",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / 'fixtures'\n# Тест на обновление комментария\n@pytest.mark.parametrize(\n    (\n        'username',\n        'password',\n        'post_id',\n        'updated_content',\n        'expected_status',\n        'fixtures',",
        "detail": "fastapi_blog.tests.api.content.post.test_update_post",
        "documentation": {}
    },
    {
        "label": "kafka_received_messages",
        "kind": 2,
        "importPath": "fastapi_blog.tests.api.conftest",
        "description": "fastapi_blog.tests.api.conftest",
        "peekOfCode": "def kafka_received_messages() -> List:\n    return []\n@pytest.fixture()\nasync def access_token(\n    client: AsyncClient,\n    username: str,\n    password: str,\n) -> str:\n    response = await client.post(\n        URLS['auth']['login'],",
        "detail": "fastapi_blog.tests.api.conftest",
        "documentation": {}
    },
    {
        "label": "TestKafkaProducer",
        "kind": 6,
        "importPath": "fastapi_blog.tests.mocking.kafka",
        "description": "fastapi_blog.tests.mocking.kafka",
        "peekOfCode": "class TestKafkaProducer:\n    def __init__(self, kafka_received_messages: List[Dict[str, Any]]):\n        self.kafka_received_messages: List[\n            Dict[str, Any]\n        ] = kafka_received_messages\n    async def send_and_wait(\n        self,\n        topic,\n        value=None,\n        key=None,",
        "detail": "fastapi_blog.tests.mocking.kafka",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "fastapi_blog.tests.conftest",
        "description": "fastapi_blog.tests.conftest",
        "peekOfCode": "def event_loop():\n    return asyncio.get_event_loop()\n@pytest.fixture(scope='session')\nasync def _migrate_db() -> FixtureFunctionT:\n    async with engine.begin() as conn:\n        await conn.run_sync(meta.metadata.drop_all)\n        await conn.run_sync(meta.metadata.create_all)\n    yield\n    async with engine.begin() as conn:\n        await conn.run_sync(meta.metadata.drop_all)",
        "detail": "fastapi_blog.tests.conftest",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "fastapi_blog.tests.const",
        "description": "fastapi_blog.tests.const",
        "peekOfCode": "URLS = {\n    'auth': {\n        'login': '/auth/login',\n        'info': '/auth/info',\n    },\n    'posts': {\n        'create': '/posts/create',\n        'read': '/posts/{post_id}',\n        'update': '/posts/{post_id}',\n        'delete': '/posts/{post_id}',",
        "detail": "fastapi_blog.tests.const",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "kind": 5,
        "importPath": "fastapi_blog.tests.my_types",
        "description": "fastapi_blog.tests.my_types",
        "peekOfCode": "FixtureFunctionT = Callable[..., FixtureFunctionMarker]\n# Определяется тип фикстуры FixtureFunctionT, который\n# используется для типизации фикстур в тестах.\n# Он может быть использован для определения типа функции,\n# которая будет использоваться в качестве фикстуры,\n# чтобы обеспечить более точную проверку типов и\n# предотвратить ошибки во время выполнения.",
        "detail": "fastapi_blog.tests.my_types",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX_COMMENT",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.api.comment.comment",
        "description": "fastapi_blog.webapp.api.comment.comment",
        "peekOfCode": "CACHE_PREFIX_COMMENT = 'comment_'\n# Дополнительная функция для инвалидации кэша\nasync def invalidate_cache(post_id: int):\n    cache_key = f'{CACHE_PREFIX_COMMENT}{post_id}'\n    await redis_startup.redis.delete(\n        cache_key\n    ) if redis_startup.redis is not None else None\n@comment_router.get('/{post_id}', tags=['Comments'])\n@kafka_producer_decorator('get_comments')\nasync def read_comments(",
        "detail": "fastapi_blog.webapp.api.comment.comment",
        "documentation": {}
    },
    {
        "label": "comment_router",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.api.comment.router",
        "description": "fastapi_blog.webapp.api.comment.router",
        "peekOfCode": "comment_router = APIRouter(prefix='/comments')",
        "detail": "fastapi_blog.webapp.api.comment.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.api.login.router",
        "description": "fastapi_blog.webapp.api.login.router",
        "peekOfCode": "auth_router = APIRouter(prefix='/auth')",
        "detail": "fastapi_blog.webapp.api.login.router",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX_POST",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.api.post.post",
        "description": "fastapi_blog.webapp.api.post.post",
        "peekOfCode": "CACHE_PREFIX_POST = 'post_'\n# Дополнительная функция для инвалидации кэша\nasync def invalidate_cache_post(post_id: int):\n    cache_key = f'{CACHE_PREFIX_POST}{post_id}'\n    await redis_startup.redis.delete(\n        cache_key\n    ) if redis_startup.redis is not None else None\n@post_router.get('/', tags=['Posts'])\n@kafka_producer_decorator('get_post')\nasync def read_posts(",
        "detail": "fastapi_blog.webapp.api.post.post",
        "documentation": {}
    },
    {
        "label": "post_router",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.api.post.router",
        "description": "fastapi_blog.webapp.api.post.router",
        "peekOfCode": "post_router = APIRouter(prefix='/posts')",
        "detail": "fastapi_blog.webapp.api.post.router",
        "documentation": {}
    },
    {
        "label": "get_producer",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.db.kafka",
        "description": "fastapi_blog.webapp.db.kafka",
        "peekOfCode": "def get_producer() -> AIOKafkaProducer:\n    global producer\n    return producer\ndef get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "fastapi_blog.webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "get_partition",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.db.kafka",
        "description": "fastapi_blog.webapp.db.kafka",
        "peekOfCode": "def get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "fastapi_blog.webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.db.postgres",
        "description": "fastapi_blog.webapp.db.postgres",
        "peekOfCode": "def create_engine() -> AsyncEngine:\n    return create_async_engine(\n        settings.DB_URL,\n        poolclass=AsyncAdaptedQueuePool,\n        connect_args={\n            'statement_cache_size': 0,\n        },\n    )\ndef create_session(\n    engine: AsyncEngine | None = None,",
        "detail": "fastapi_blog.webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "create_session",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.db.postgres",
        "description": "fastapi_blog.webapp.db.postgres",
        "peekOfCode": "def create_session(\n    engine: AsyncEngine | None = None,\n) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(\n        bind=engine or create_engine(),\n        class_=AsyncSession,\n        autoflush=False,\n        expire_on_commit=False,\n    )\nengine = create_engine()",
        "detail": "fastapi_blog.webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.db.postgres",
        "description": "fastapi_blog.webapp.db.postgres",
        "peekOfCode": "engine = create_engine()\nasync_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "fastapi_blog.webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.db.postgres",
        "description": "fastapi_blog.webapp.db.postgres",
        "peekOfCode": "async_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "fastapi_blog.webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.models.sirius.comment",
        "description": "fastapi_blog.webapp.models.sirius.comment",
        "peekOfCode": "class Comment(Base):\n    __tablename__ = 'comment'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(\n        Integer, primary_key=True, index=True, autoincrement=True\n    )\n    content: Mapped[str] = mapped_column(String)\n    author_id: Mapped[int] = mapped_column(\n        Integer, ForeignKey(f'{DEFAULT_SCHEMA}.user.id')\n    )",
        "detail": "fastapi_blog.webapp.models.sirius.comment",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.models.sirius.post",
        "description": "fastapi_blog.webapp.models.sirius.post",
        "peekOfCode": "class Post(Base):\n    __tablename__ = 'post'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(\n        Integer, primary_key=True, index=True, autoincrement=True\n    )\n    content: Mapped[str] = mapped_column(String)\n    author_id: Mapped[int] = mapped_column(\n        Integer, ForeignKey(f'{DEFAULT_SCHEMA}.user.id')\n    )",
        "detail": "fastapi_blog.webapp.models.sirius.post",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.models.sirius.user",
        "description": "fastapi_blog.webapp.models.sirius.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'user'\n    __table_args__ = ({'schema': DEFAULT_SCHEMA},)\n    id: Mapped[int] = mapped_column(\n        Integer, primary_key=True, index=True, autoincrement=True\n    )\n    username: Mapped[str] = mapped_column(String, unique=True)\n    email: Mapped[str] = mapped_column(String, unique=True)\n    hashed_password: Mapped[str] = mapped_column(String)\n    posts = relationship('Post', back_populates='author')",
        "detail": "fastapi_blog.webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "NAMING_CONVENTION",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.models.meta",
        "description": "fastapi_blog.webapp.models.meta",
        "peekOfCode": "NAMING_CONVENTION = {\n    'ix': 'ix_%(column_0_label)s',\n    'uq': 'uq_%(table_name)s_%(column_0_name)s',\n    'ck': 'ck_%(table_name)s_%(constraint_name)s',\n    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n    'pk': 'pk_%(table_name)s',\n}\nDEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "fastapi_blog.webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.models.meta",
        "description": "fastapi_blog.webapp.models.meta",
        "peekOfCode": "DEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "fastapi_blog.webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.models.meta",
        "description": "fastapi_blog.webapp.models.meta",
        "peekOfCode": "metadata = MetaData(naming_convention=NAMING_CONVENTION)\nBase = declarative_base(metadata=metadata)",
        "detail": "fastapi_blog.webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.models.meta",
        "description": "fastapi_blog.webapp.models.meta",
        "peekOfCode": "Base = declarative_base(metadata=metadata)",
        "detail": "fastapi_blog.webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "CommentBase",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.comment",
        "description": "fastapi_blog.webapp.schema.content.comment",
        "peekOfCode": "class CommentBase(BaseModel):\n    content: str\nclass CommentCreate(CommentBase):\n    pass\nclass CommentRead(CommentBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    post_id: int\n    created_at: datetime",
        "detail": "fastapi_blog.webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.comment",
        "description": "fastapi_blog.webapp.schema.content.comment",
        "peekOfCode": "class CommentCreate(CommentBase):\n    pass\nclass CommentRead(CommentBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    post_id: int\n    created_at: datetime\nclass CommentUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "CommentRead",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.comment",
        "description": "fastapi_blog.webapp.schema.content.comment",
        "peekOfCode": "class CommentRead(CommentBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    post_id: int\n    created_at: datetime\nclass CommentUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.comment",
        "description": "fastapi_blog.webapp.schema.content.comment",
        "peekOfCode": "class CommentUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.comment",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.post",
        "description": "fastapi_blog.webapp.schema.content.post",
        "peekOfCode": "class PostBase(BaseModel):\n    content: str\nclass PostCreate(PostBase):\n    pass\nclass PostRead(PostBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    created_at: datetime\nclass PostUpdate(BaseModel):",
        "detail": "fastapi_blog.webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.post",
        "description": "fastapi_blog.webapp.schema.content.post",
        "peekOfCode": "class PostCreate(PostBase):\n    pass\nclass PostRead(PostBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    created_at: datetime\nclass PostUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "PostRead",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.post",
        "description": "fastapi_blog.webapp.schema.content.post",
        "peekOfCode": "class PostRead(PostBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    author_id: int\n    created_at: datetime\nclass PostUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "PostUpdate",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.content.post",
        "description": "fastapi_blog.webapp.schema.content.post",
        "peekOfCode": "class PostUpdate(BaseModel):\n    content: Optional[str] = None",
        "detail": "fastapi_blog.webapp.schema.content.post",
        "documentation": {}
    },
    {
        "label": "ImageResize",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.file.resize",
        "description": "fastapi_blog.webapp.schema.file.resize",
        "peekOfCode": "class ImageResize(BaseModel):\n    image: UploadFile\n    width: int = Form()\n    height: int = Form()\nclass ResizeStatusEnum(enum.Enum):\n    status = 'status'\nclass ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "fastapi_blog.webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ResizeStatusEnum",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.file.resize",
        "description": "fastapi_blog.webapp.schema.file.resize",
        "peekOfCode": "class ResizeStatusEnum(enum.Enum):\n    status = 'status'\nclass ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "fastapi_blog.webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "ImageResizeResponse",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.file.resize",
        "description": "fastapi_blog.webapp.schema.file.resize",
        "peekOfCode": "class ImageResizeResponse(BaseModel):\n    status: ResizeStatusEnum\n    task_id: str",
        "detail": "fastapi_blog.webapp.schema.file.resize",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.login.user",
        "description": "fastapi_blog.webapp.schema.login.user",
        "peekOfCode": "class User(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    username: str\n    email: str\nclass UserLogin(BaseModel):\n    username: str\n    password: str\nclass UserLoginResponse(BaseModel):\n    access_token: str",
        "detail": "fastapi_blog.webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.login.user",
        "description": "fastapi_blog.webapp.schema.login.user",
        "peekOfCode": "class UserLogin(BaseModel):\n    username: str\n    password: str\nclass UserLoginResponse(BaseModel):\n    access_token: str",
        "detail": "fastapi_blog.webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.login.user",
        "description": "fastapi_blog.webapp.schema.login.user",
        "peekOfCode": "class UserLoginResponse(BaseModel):\n    access_token: str",
        "detail": "fastapi_blog.webapp.schema.login.user",
        "documentation": {}
    },
    {
        "label": "UserRegistration",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.schema.registration.reg",
        "description": "fastapi_blog.webapp.schema.registration.reg",
        "peekOfCode": "class UserRegistration(BaseModel):\n    username: str = Field(..., min_length=3, json_schema_extra='username')\n    email: EmailStr = Field(..., json_schema_extra='user@example.com')\n    password: str = Field(..., min_length=8, json_schema_extra='yourpassword')\n    class ConfigDict:\n        schema_extra = {\n            'example': {\n                'username': 'username',\n                'email': 'user@example.com',\n                'password': 'yourpassword',",
        "detail": "fastapi_blog.webapp.schema.registration.reg",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.utils.auth.jwt",
        "description": "fastapi_blog.webapp.utils.auth.jwt",
        "peekOfCode": "class JwtTokenT(TypedDict):\n    uid: int\n    exp: datetime\n    user_id: int\n@dataclass\nclass JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        access_token = {\n            'uid': uuid.uuid4().hex,",
        "detail": "fastapi_blog.webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "JwtAuth",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.utils.auth.jwt",
        "description": "fastapi_blog.webapp.utils.auth.jwt",
        "peekOfCode": "class JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        access_token = {\n            'uid': uuid.uuid4().hex,\n            'exp': datetime.utcnow() + timedelta(days=1),\n            'user_id': user_id,\n        }\n        return jwt.encode(access_token, self.secret)\n    def validate_token(",
        "detail": "fastapi_blog.webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.utils.auth.jwt",
        "description": "fastapi_blog.webapp.utils.auth.jwt",
        "peekOfCode": "jwt_auth = JwtAuth(settings.JWT_SECRET_SALT)",
        "detail": "fastapi_blog.webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.utils.auth.password",
        "description": "fastapi_blog.webapp.utils.auth.password",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return hashlib.md5(password.encode()).hexdigest()",
        "detail": "fastapi_blog.webapp.utils.auth.password",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.utils.auth.user",
        "description": "fastapi_blog.webapp.utils.auth.user",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\nasync def get_current_user(\n    token: str = Depends(oauth2_scheme),\n    session: AsyncSession = Depends(get_session),\n    redis: aioredis.Redis = Depends(get_redis_pool),\n) -> User:\n    jwt_payload = jwt_auth.validate_token(token)\n    user_id = jwt_payload['user_id']\n    # Попытка получить данные пользователя из Redis\n    cached_user_data = await redis.get(f'user_{user_id}')",
        "detail": "fastapi_blog.webapp.utils.auth.user",
        "documentation": {}
    },
    {
        "label": "kafka_producer_decorator",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.utils.decorator",
        "description": "fastapi_blog.webapp.utils.decorator",
        "peekOfCode": "def kafka_producer_decorator(topic, status_code=status.HTTP_200_OK):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            start = time.time()\n            result = await func(*args, **kwargs)\n            if hasattr(result, 'dict'):\n                result_data = result.dict()\n            elif isinstance(result, dict):\n                result_data = result",
        "detail": "fastapi_blog.webapp.utils.decorator",
        "documentation": {}
    },
    {
        "label": "MeasureLatencyMiddleware",
        "kind": 6,
        "importPath": "fastapi_blog.webapp.utils.middleware",
        "description": "fastapi_blog.webapp.utils.middleware",
        "peekOfCode": "class MeasureLatencyMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        endpoint = request.url.path\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        DEPS_LATENCY.labels(endpoint=endpoint).observe(process_time)\n        # Увеличиваем счетчик запросов\n        REQUESTS_COUNTER.labels(\n            method=request.method,",
        "detail": "fastapi_blog.webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.utils.middleware",
        "description": "fastapi_blog.webapp.utils.middleware",
        "peekOfCode": "REQUESTS_COUNTER = Counter(\n    'sirius_api_requests_total',\n    'Total number of requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\n# Счетчики для успешных и неуспешных запросов\nSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_successful_requests_total',\n    'Total number of successful requests to the API',\n    ['method', 'endpoint', 'http_status'],",
        "detail": "fastapi_blog.webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "SUCCESSFUL_REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.utils.middleware",
        "description": "fastapi_blog.webapp.utils.middleware",
        "peekOfCode": "SUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_successful_requests_total',\n    'Total number of successful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\nUNSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_unsuccessful_requests_total',\n    'Total number of unsuccessful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)",
        "detail": "fastapi_blog.webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "UNSUCCESSFUL_REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.utils.middleware",
        "description": "fastapi_blog.webapp.utils.middleware",
        "peekOfCode": "UNSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_unsuccessful_requests_total',\n    'Total number of unsuccessful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\nclass MeasureLatencyMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        endpoint = request.url.path\n        start_time = time.time()\n        response = await call_next(request)",
        "detail": "fastapi_blog.webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "setup_middleware",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.main",
        "description": "fastapi_blog.webapp.main",
        "peekOfCode": "def setup_middleware(app: FastAPI) -> None:\n    # CORS Middleware should be the last.\n    # See https://github.com/tiangolo/fastapi/issues/1663 .\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=['*'],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )",
        "detail": "fastapi_blog.webapp.main",
        "documentation": {}
    },
    {
        "label": "setup_routers",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.main",
        "description": "fastapi_blog.webapp.main",
        "peekOfCode": "def setup_routers(app: FastAPI) -> None:\n    app.add_route('/metrics', metrics)\n    app.include_router(auth_router)\n    app.include_router(post_router)\n    app.include_router(comment_router)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    await create_producer()\n    await get_redis_pool()\n    print('START APP')",
        "detail": "fastapi_blog.webapp.main",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.main",
        "description": "fastapi_blog.webapp.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    app = FastAPI(docs_url='/swagger', lifespan=lifespan)\n    setup_middleware(app)\n    setup_routers(app)\n    return app",
        "detail": "fastapi_blog.webapp.main",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 2,
        "importPath": "fastapi_blog.webapp.metrics",
        "description": "fastapi_blog.webapp.metrics",
        "peekOfCode": "def metrics(request: Request) -> Response:\n    if 'prometheus_multiproc_dir' in os.environ:\n        registry = CollectorRegistry()\n        MultiProcessCollector(registry)\n    else:\n        registry = REGISTRY\n    return Response(\n        generate_latest(registry),\n        headers={'Content-Type': CONTENT_TYPE_LATEST},\n    )",
        "detail": "fastapi_blog.webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BUCKETS",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.metrics",
        "description": "fastapi_blog.webapp.metrics",
        "peekOfCode": "DEFAULT_BUCKETS = (\n    0.005,\n    0.01,\n    0.025,\n    0.05,\n    0.075,\n    0.1,\n    0.125,\n    0.15,\n    0.175,",
        "detail": "fastapi_blog.webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "kind": 5,
        "importPath": "fastapi_blog.webapp.metrics",
        "description": "fastapi_blog.webapp.metrics",
        "peekOfCode": "DEPS_LATENCY = prometheus_client.Histogram(\n    'sirius_deps_latency_seconds',\n    '',\n    ['endpoint'],\n    buckets=DEFAULT_BUCKETS,\n)\ndef metrics(request: Request) -> Response:\n    if 'prometheus_multiproc_dir' in os.environ:\n        registry = CollectorRegistry()\n        MultiProcessCollector(registry)",
        "detail": "fastapi_blog.webapp.metrics",
        "documentation": {}
    }
]